datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          String          @default("user")
  password      String?
  comment       Comment[]
  village       String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Session       Session[]
  Authenticator Authenticator[]
  Laporan       Laporan[]
}

model Village {
  id           String         @id @default(cuid())
  name         String
  slug         String
  provinsi     String
  kabupaten    String
  kecamatan    String
  comments     Comment[]
  budgetPeriod budgetPeriod[]
  laporan      Laporan[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([slug])
}

model Comment {
  id        String  @id @default(cuid())
  userId    String
  text      String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  villageId String
  village   Village @relation(fields: [villageId], references: [id], onDelete: Cascade)
}

model budgetPeriod {
  id          String       @id @default(cuid())
  name        String
  month       Int
  year        Int
  villageSlug String
  village     Village      @relation(fields: [villageSlug], references: [slug], onDelete: Cascade)
  BudgetItem  BudgetItem[]
}

model BudgetItem {
  id             String       @id @default(cuid())
  mainCategory   String
  subCategory    String
  name           String
  code           String
  realization    Int
  budget         Int
  budgetPeriodId String
  budgetPeriod   budgetPeriod @relation(fields: [budgetPeriodId], references: [id], onDelete: Cascade)
}

model Laporan {
  id          String  @id @default(cuid())
  title       String
  description String? 
  status      String  @default("draft")
  year        Int
  month       Int
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  villageId   String
  village     Village @relation(fields: [villageId], references: [id], onDelete: Cascade)
}
