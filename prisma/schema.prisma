// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String?
  image     String?
  comments  Comment[]
  accounts  Account[]
  role      String    @default("user")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
}

model Village {
  id         String       @id @default(cuid())
  name       String
  slug       String
  comments   Comment[]
  budgetItem BudgetItem[]

  @@unique([slug])
}

model Comment {
  id        String  @id @default(cuid())
  userId    String
  text      String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  villageId String
  village   Village @relation(fields: [villageId], references: [id], onDelete: Cascade)
}

model BudgetItem {
  id           String  @id @default(cuid())
  mainCategory String
  subCategory  String
  name         String
  code         String
  realization  Int
  budget       Int
  villageId    String
  village      Village @relation(fields: [villageId], references: [id], onDelete: Cascade)
}
